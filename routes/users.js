const express = require("express");
const router = express.Router();
const { db, admin } = require("../firebase"); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Firebase Admin SDK

// üìå ‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.post("/register", async (req, res) => {
    try {
        const { email, password, username } = req.body;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É Firebase Authentication (–ê–î–ú–Ü–ù–°–¨–ö–ê –í–ï–†–°–Ü–Ø)
        const userRecord = await admin.auth().createUser({
            email,
            password,
            displayName: username,
        });

        // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É Firestore
        await db.collection("users").doc(userRecord.uid).set({
            username,
            email,
            createdAt: new Date().toISOString(),
        });

        // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω
        const token = await admin.auth().createCustomToken(userRecord.uid);

        res.status(201).json({ message: "User registered", uid: userRecord.uid, token });
    } catch (error) {
        console.error(error);
        res.status(400).json({ error: error.message });
    }
});

// üìå ‚úÖ –õ–æ–≥—ñ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.post("/login", async (req, res) => {
    try {
        const { email } = req.body;

        // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ email
        const userRecord = await admin.auth().getUserByEmail(email);

        // –ì–µ–Ω–µ—Ä—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ç–æ–∫–µ–Ω
        const token = await admin.auth().createCustomToken(userRecord.uid);

        res.status(200).json({ message: "Login successful", uid: userRecord.uid, token });
    } catch (error) {
        console.error(error);
        res.status(400).json({ error: "Invalid email or password" });
    }
});

// üìå ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞—Ö–∏—â–µ–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç)
router.get("/me", async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1]; // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if (!token) return res.status(401).json({ error: "Unauthorized" });

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω Firebase
        const decodedToken = await admin.auth().verifyIdToken(token);
        const uid = decodedToken.uid;

        // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Firestore
        const userDoc = await db.collection("users").doc(uid).get();
        if (!userDoc.exists) return res.status(404).json({ error: "User not found" });

        res.json({ uid, ...userDoc.data() });
    } catch (error) {
        console.error(error);
        res.status(401).json({ error: "Unauthorized" });
    }
});

module.exports = router;
